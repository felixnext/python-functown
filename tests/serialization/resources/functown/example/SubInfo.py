# automatically generated by the FlatBuffers compiler, do not modify

# namespace: example

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SubInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SubInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSubInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SubInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SubInfo
    def Msg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SubInfo
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def SubInfoStart(builder): builder.StartObject(2)
def Start(builder):
    return SubInfoStart(builder)
def SubInfoAddMsg(builder, msg): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(msg), 0)
def AddMsg(builder, msg):
    return SubInfoAddMsg(builder, msg)
def SubInfoAddType(builder, type): builder.PrependInt8Slot(1, type, 0)
def AddType(builder, type):
    return SubInfoAddType(builder, type)
def SubInfoEnd(builder): return builder.EndObject()
def End(builder):
    return SubInfoEnd(builder)