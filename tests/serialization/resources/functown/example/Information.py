# automatically generated by the FlatBuffers compiler, do not modify

# namespace: example

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Information(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Information()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInformation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Information
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Information
    def Msg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Information
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Information
    def Score(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Information
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from functown.example.SubInfo import SubInfo
            obj = SubInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Information
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Information
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def InformationStart(builder): builder.StartObject(4)
def Start(builder):
    return InformationStart(builder)
def InformationAddMsg(builder, msg): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(msg), 0)
def AddMsg(builder, msg):
    return InformationAddMsg(builder, msg)
def InformationAddId(builder, id): builder.PrependInt32Slot(1, id, 0)
def AddId(builder, id):
    return InformationAddId(builder, id)
def InformationAddScore(builder, score): builder.PrependFloat32Slot(2, score, 0.0)
def AddScore(builder, score):
    return InformationAddScore(builder, score)
def InformationAddData(builder, data): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AddData(builder, data):
    return InformationAddData(builder, data)
def InformationStartDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDataVector(builder, numElems):
    return InformationStartDataVector(builder, numElems)
def InformationEnd(builder): return builder.EndObject()
def End(builder):
    return InformationEnd(builder)